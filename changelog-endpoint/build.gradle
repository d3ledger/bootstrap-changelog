/*
 * Copyright D3 Ledger, Inc. All Rights Reserved.
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    ext.ktor_version = '1.0.0'
    ext.notary_version = 'ad6cad8534d76b2f4d6bda7e013e1e1c3e4bd156'

    repositories {
        mavenCentral()
        jcenter()
        // gradle plugins repository
        gradlePluginPortal()
    }
    dependencies {
        classpath 'com.github.jengelman.gradle.plugins:shadow:4.0.1'
    }
}

plugins {
    id "org.jetbrains.kotlin.plugin.spring" version "1.3.21"
    id 'jp.co.soramitsu.sora-plugin' version '0.1.2'
}

apply plugin: 'application'
apply plugin: 'com.github.johnrengelman.shadow'
shadowDistZip.classifier = 'shadow'
shadowDistTar.classifier = 'shadow'

group 'jp.co.soramitsu.bootstrap.changelog'
mainClassName = "jp.co.soramitsu.bootstrap.changelog.ChangelogAppMain"

// name of jar file that the shadowJar plugin generates
shadowJar.archiveName = 'app.jar'

// sora-plugin configs
soramitsu {
    projectGroup = 'd3'
    docker {
        // docker tag
        tag = System.getenv("TAG")
        // jar file that is used in the generated Dockerfile
        jar = new File("build/libs/app.jar")
        // the rest in configured using env variables
    }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    implementation project(":changelog-interface")
    implementation "com.github.d3ledger.notary:notary-commons:$notary_version"
    // Spring
    implementation group: 'org.springframework', name: 'spring-context', version: '5.1.4.RELEASE'
    // Logging
    implementation group: 'commons-logging', name: 'commons-logging', version: '1.2'
    implementation 'io.github.microutils:kotlin-logging:1.4.9'
    implementation group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.8.0-beta2'
    // Json
    implementation group: 'org.json', name: 'json', version: '20180813'
    // Groovy
    implementation group: 'org.codehaus.groovy', name: 'groovy', version: '3.0.0-alpha-4'
    // Result
    implementation group: 'com.github.kittinunf.result', name: 'result', version: '1.4.0'
    // Ktor
    implementation "io.ktor:ktor-server-core:$ktor_version"
    implementation "io.ktor:ktor-server-netty:$ktor_version"
    implementation group: 'io.ktor', name: 'ktor-server-test-host', version: '1.0.0-beta-4'
    implementation "io.ktor:ktor-gson:$ktor_version"
    // Swagger
    implementation 'de.nielsfalk.ktor:ktor-swagger:0.5.0'
    //Iroha-java related
    testImplementation ('com.github.hyperledger.iroha-java:testcontainers:6.1.0')
    // https://mvnrepository.com/artifact/com.google.protobuf/protobuf-java-util
    testImplementation group: 'com.google.protobuf', name: 'protobuf-java-util', version: '3.7.1'
    testImplementation('org.slf4j:slf4j-api:1.7.25')
    testImplementation('org.slf4j:slf4j-simple:1.7.25')
}

task run–°hangelog(type: JavaExec) {
    main = 'jp.co.soramitsu.bootstrap.changelog.ChangelogAppMain'
    classpath = sourceSets.main.runtimeClasspath
    setWorkingDir("$rootDir/")
}

sourceSets {
    integrationTest {
        kotlin {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDirs += 'src/integration-test/kotlin'
        }
        resources {
            srcDirs = ["src/integration-test/resources"]
        }
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run changelog integration tests'

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    setWorkingDir("$rootDir/")
    // Enable JUnit5 tests
    useJUnitPlatform {
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

project.afterEvaluate {
    dockerfileCreate.dependsOn(shadowJar)
    integrationTest.dependsOn(dockerfileCreate)
    test.finalizedBy(integrationTest)
}
